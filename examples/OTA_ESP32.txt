Das Hochladen von Code per WiFi (OTA = Over-The-Air) auf einen ESP32 mit der Arduino IDE ist m√∂glich ‚Äì und sehr praktisch. Hier ist eine klare Schritt-f√ºr-Schritt-Anleitung, wie du deinen ESP32 per OTA flashen kannst:
‚úÖ Voraussetzungen

    Arduino IDE installiert

    ESP32-Plattform installiert (√ºber Boardverwalter)

    ESP32 ist bereits einmal per USB geflasht worden (f√ºr OTA-Setup)

    PC und ESP32 sind im gleichen WLAN

    Die OTA-Bibliothek (ArduinoOTA) ist im Sketch eingebunden

üß† Funktionsprinzip

Du l√§dst einmalig einen OTA-f√§higen Sketch per USB auf deinen ESP32. Danach kannst du diesen und alle folgenden OTA-f√§higen Sketches per WLAN hochladen.
‚úÖ Schritt-f√ºr-Schritt-Anleitung
üîπ 1. ArduinoOTA Bibliothek einbinden

#include <WiFi.h>
#include <ArduinoOTA.h>

üîπ 2. WLAN-Zugangsdaten einstellen

const char* ssid = "DEIN_WIFI_NAME";
const char* password = "DEIN_WIFI_PASSWORT";

üîπ 3. Setup erweitern

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi verbunden");
  Serial.println(WiFi.localIP());

  // OTA initialisieren
  ArduinoOTA.setHostname("esp32-ota"); // Optional

  ArduinoOTA.onStart([]() {
    Serial.println("OTA Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nOTA Ende");
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("OTA Fehler [%u]\n", error);
  });

  ArduinoOTA.begin();
  Serial.println("OTA bereit");
}

üîπ 4. loop() anpassen

void loop() {
  ArduinoOTA.handle();  // Muss regelm√§√üig aufgerufen werden
  // Dein restlicher Code hier
}

üß™ 5. Einmal per USB hochladen

    Schlie√üe deinen ESP32 per USB an.

    W√§hle das richtige Board und Port in der Arduino IDE.

    Lade den OTA-f√§higen Sketch per USB hoch.

üì° 6. Ab jetzt: OTA verf√ºgbar

    Jetzt kannst du in der Arduino IDE im Men√º ‚ÄûWerkzeuge > Port‚Äú einen neuen Port im Netzwerk sehen, z.‚ÄØB.:

    esp32-ota at 192.168.1.23

    W√§hle diesen Netzwerkport aus.

    Klicke auf ‚ÄûHochladen‚Äú, und der Sketch wird √ºber WLAN √ºbertragen.

‚ö†Ô∏è Wichtige Hinweise
Punkt	Info
Erste √úbertragung	Muss per USB erfolgen (damit OTA eingerichtet wird)
OTA l√§uft nur	Wenn ArduinoOTA.handle() in loop() aufgerufen wird
Firewall	Stelle sicher, dass keine Firewall OTA-Verbindungen blockiert
Neustart nach Upload	Der ESP32 startet automatisch nach dem OTA-Upload neu
üß© Beispiel: OTA-f√§higer Basis-Sketch

#include <WiFi.h>
#include <ArduinoOTA.h>

const char* ssid = "DEIN_WIFI_NAME";
const char* password = "DEIN_WIFI_PASSWORT";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi verbunden, IP: " + WiFi.localIP().toString());

  ArduinoOTA.setHostname("esp32-ota");

  ArduinoOTA.begin();
  Serial.println("OTA bereit");
}

void loop() {
  ArduinoOTA.handle();
}

Wenn du willst, kann ich dir deinen bestehenden LED-Code OTA-f√§hig machen ‚Äì sag einfach Bescheid!
Du:
muss das ota script immer im hochgeladenen skript vorhanden sein?
ChatGPT:

Ja, das OTA-Script (bzw. die OTA-Funktionalit√§t) muss immer Teil deines hochgeladenen Sketches sein, wenn du OTA weiterhin nutzen willst.